rules_version = '2';
service cloud.firestore {
  function isRecidiviz() {
    return request.auth.token.stateCode.upper() == "RECIDIVIZ";
  }

  function appIsStaff() {
    return request.auth.token.app == "staff"
  }

  function appIsJii() {
    return request.auth.token.app == "jii"
  }

  function stateCodeMatchesTarget() {
    // checking if resource exists first prevents null errors
    return resource != null && (request.auth.token.stateCode.upper() == resource.data.stateCode.upper());
  }

  function recidivizAllowedStatesIncludesTarget(collection) {
    return isRecidiviz() && 
      (
        // check if resource exists before checking the state code
        // if the resource does not yet exist or is demo data, allow the operation
        resource == null ||
        isDemoCollection(collection) ||
        resource.data.stateCode.upper() in request.auth.token.recidivizAllowedStates
      )
  }

  function usernameMatches(id) {
    return request.auth.token.user_id.lower() == id.lower();
  }

  function hasProperStateCodePrefix(clientId) {
    // Check to make sure an ID is properly prefixed by the state code
    // e.g. "us_xx_someID"
    return clientId.lower().matches("us_[a-z][a-z]_.+");
  }

  function notAnUpdateCollection(collectionName) {
    return !collectionName.matches(".*Updates.*");
  }

  function isDemoCollection(collectionName) {
    return collectionName.matches("^DEMO_.*");
  }

  function stateCodeMatchesPrefix(id) {
    // check to see if the first 5 characters match the state code of the requester
    return id.upper()[0:5] == request.auth.token.stateCode.upper();
  }

  function allowPersonUpdates(clientId) {
    return (hasProperStateCodePrefix(clientId) && (recidivizUserHasAccess(clientId) || 
      stateCodeMatchesPrefix(clientId)) && !request.auth.get(["token", "impersonator"], false));
  }

  function allowUserUpdates(document) {
    return (usernameMatches(document) && !request.auth.get(["token", "impersonator"], false));
  }

  function stateCodeIncludedInRecidivizAllowedStates(clientId) {
    return (clientId.upper()[0:5] in request.auth.token.recidivizAllowedStates);
  }

  function recidivizUserHasAccess(clientId) {
    return isRecidiviz() && stateCodeIncludedInRecidivizAllowedStates(clientId);
  }

  function userDocIdRegexFromToken() {
    return ((request.auth.token.stateCode.lower() + "_" + request.auth.token.externalId))
  }

  function notAStaffCollection(collectionName) {
    return !(collectionName.lower().matches(".*staff.*"));
  }

  function allowStaffGeneralRead(collection) {
    return appIsStaff() &&
      (
        recidivizAllowedStatesIncludesTarget(collection) || 
        // allow operations against missing docs to avoid useless errors;
        // next function will error if the resource is null
        resource == null ||
        stateCodeMatchesTarget()
      )
  }

  function hasPermission(permission) {
    return permission in request.auth.token.permissions;
  }

  function docIdMatchesUserId(documentId) {
    return documentId == path(userDocIdRegexFromToken())
  }

  function allowJiiGeneralRead(collection, documentPath) {
    return appIsJii() &&
      (
        (recidivizAllowedStatesIncludesTarget(collection) && hasPermission("enhanced")) ||
        (
          notAStaffCollection(collection) && 
          (
            (hasPermission("enhanced") && 
              // with enhanced permission for a state you can read anything that matches your state code,
              // either in the document ID or a stateCode field in the document. In practice, documents 
              // generally have both, but checking the ID first avoids edge cases around missing data
              // as well as unnecessary reads for single document lookups
              (stateCodeMatchesPrefix(documentPath[0]) || stateCodeMatchesTarget())
              )
             ||
            // without enhanced permission you are restricted to documents whose ID
            // matches your state code + external ID (i.e. your own data)
            docIdMatchesUserId(documentPath)
            
          )
        )
      )
  }

  function allowJiiLiveRead(collection, documentPath) {
    return hasPermission("live_data") 
      && allowJiiGeneralRead(collection, documentPath);
  }


  match /databases/{database}/documents {

    match /featureVariants/{record} {
      allow read: if usernameMatches(record);
    }

    match /{collection}/{document=**} {
      // there are a different set of read rules for Update collections
      // firestore will allow an operation if ANY rules match it,
      // so we specifically filter out update collections here
      allow read: if notAnUpdateCollection(collection) &&
        (
          allowStaffGeneralRead(collection) || 
          (!isDemoCollection(collection) && allowJiiLiveRead(collection, document)) ||
          (isDemoCollection(collection) && allowJiiGeneralRead(collection, document))
        )
        ;
    }

    match /userUpdates/{path=**}/{document} {
      allow read: if appIsStaff() && usernameMatches(document)
      allow write: if appIsStaff() && allowUserUpdates(document);
    }

    // We may want to get more granular with JII app permissions and subcollections
    // once the app is external-facing.
    match /clientUpdatesV2/{clientId}/{document=**} {
      // documentIDs for the client updates are of the form us_xx_${client_id}
      // check to make sure the user's state code matches the prefix on the record
      allow read: if 
        (
          appIsStaff() && (recidivizUserHasAccess(clientId) || stateCodeMatchesPrefix(clientId))
        )
      allow write: if appIsStaff() && allowPersonUpdates(clientId);
    }

    match /DEMO_userUpdates/{path=**}/{document} {
      allow read: if appIsStaff() && usernameMatches(document);
      allow write: if appIsStaff() && allowUserUpdates(document);
    }
    
    match /DEMO_clientUpdatesV2/{clientId}/{document=**} {
      allow read: if appIsStaff() && (isRecidiviz() || stateCodeMatchesPrefix(clientId));
      allow write: if appIsStaff() && allowPersonUpdates(clientId);
    }

    match /DEMO2_featureVariants/{record} {
      allow read: if appIsStaff() && usernameMatches(record);
    }

    match /DEMO2_userUpdates/{path=**}/{document} {
      allow read: if appIsStaff() && usernameMatches(document);
      allow write: if appIsStaff() && allowUserUpdates(document);
    }

    match /DEMO2_clientUpdatesV2/{clientId}/{document=**} {
      allow read: if appIsStaff() && (isRecidiviz() || stateCodeMatchesPrefix(clientId));
      allow write: if appIsStaff() && allowPersonUpdates(clientId);
    }
  }
}
