generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing", "omitApi", "fullTextSearchPostgres"]
  output          = "../../../../node_modules/@prisma/jii-texting-server/client"
}

datasource db {
  provider = "postgresql"
  // TODO(#38084) Create Helper to get DB URL
  url      = env("DATABASE_URL")
}

enum StateCode {
  US_AL
  US_AK
  US_AZ
  US_AR
  US_CA
  US_CO
  US_CT
  US_DE
  US_FL
  US_GA
  US_HI
  US_ID
  US_IL
  US_IN
  US_IA
  US_KS
  US_KY
  US_LA
  US_ME
  US_MD
  US_MA
  US_MI
  US_MN
  US_MS
  US_MO
  US_MT
  US_NE
  US_NV
  US_NH
  US_NJ
  US_NM
  US_NY
  US_NC
  US_ND
  US_OH
  US_OK
  US_OR
  US_PA
  US_RI
  US_SC
  US_SD
  US_TN
  US_TX
  US_UT
  US_VT
  US_VA
  US_WA
  US_WV
  US_WI
  US_WY
}

enum MessageType {
  INITIAL_TEXT
  ELIGIBILITY_TEXT
}

enum Status {
  ACTIVE
  INACTIVE
}

enum MessageAttemptStatus {
  FAILURE
  SUCCESS
  IN_PROGRESS
  UNKNOWN
}

model Person {
  externalId      String    @id // indicated by DOC
  pseudonymizedId String    @unique // hashed id used to anonymize
  personId        String    @unique // internal Recidiviz id
  stateCode       StateCode
  givenName       String
  middleName      String
  surname         String
  nameSuffix      String
  phoneNumber     String    @unique
  officerId       String
  poName          String
  district        String
  lastOptOutDate  DateTime? // will not be null if person has opted-out

  groups        Group[] // will be an empty list if this person should not be texted that day
  messageSeries MessageSeries[]
}

model MessageSeries {
  id               String      @id @default(cuid())
  messageType      MessageType

  person           Person           @relation(fields: [personExternalId], references: [externalId])
  personExternalId String
  group            Group            @relation(fields: [groupId], references: [id])
  groupId          String
  messageAttempts  MessageAttempt[]
}

model MessageAttempt {
  id                     String               @id @default(cuid())
  twilioMessageSid       String               @unique
  body                   String
  phoneNumber            String
  status                 MessageAttemptStatus
  createdTimestamp       DateTime // when sent post request to Twilio
  lastUpdatedTimestamp   DateTime? // when status last updated by us
  twilioSentTimestamp    DateTime? // when Twilio actually attempted to send message
  requestedSendTimestamp DateTime? // when we asked Twilio to schedule send message
  error                  String?
  errorCode              Int?

  messageSeries       MessageSeries     @relation(fields: [messageSeriesId], references: [id])
  messageSeriesId           String
  workflowExecution   WorkflowExecution @relation(fields: [workflowExecutionId], references: [id])
  workflowExecutionId String
  clicks              Click[]
}

model Topic {
  id        String    @id @default(cuid())
  topicName String
  stateCode StateCode
  status    Status    @default(INACTIVE)

  groups Group[]

  @@unique([topicName, stateCode])
}

model Group {
  id                  String  @id @default(cuid())
  groupName           String
  messageCopyTemplate String?
  status              Status  @default(INACTIVE)

  topic         Topic           @relation(fields: [topicId], references: [id])
  topicId       String
  people        Person[]
  messageSeries MessageSeries[]

  @@unique([groupName, topicId])
}

model WorkflowExecution {
  id                    String    @id @default(cuid())
  stateCode             StateCode
  workflowExecutionTime DateTime

  messageAttempts MessageAttempt[]
}

model Click {
  id                  String   @id @default(cuid())
  from                String
  link                String
  clickTime           DateTime
  messagingServiceSid String
  accountSid          String
  userAgent           String

  messageAttempt MessageAttempt @relation(fields: [smsSid], references: [twilioMessageSid])
  smsSid         String         @unique
}
